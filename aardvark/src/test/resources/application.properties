#===================App Properties================= #
spring.application.name=Aardvark
user_request.schema.location=classpath:model/user_request.schema.json
#===================General settings======================#
# We want this to fail if the request is malformed. Using schema validation removes the need for this.
# spring.jackson.deserialization.fail-on-unknown-properties=true

#For looking pretty
#spring.jackson.mapper.sort-properties-alphabetically=true
spring.jackson.date-format=MMM dd, yyyy hh:mm:ss a

#================== H2 Properties ================= #
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.datasource.url=jdbc:h2:file:./data/aardvark;INIT= CREATE SCHEMA IF NOT EXISTS Aardvark\\;SET SCHEMA Aardvark
spring.datasource.driverClassName=org.h2.Driver
spring.h2.console.enabled=true

#================ Hibernate Properties ============ #

spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create
# Remove the two above to allow use of schema.sql. H2 doesn't use it unless specifying it in the url itself.
#
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.use_sql_comments=false
spring.jpa.properties.hibernate.format_sql=true
spring.sql.init.mode=embedded
spring.sql.init.username=sa
spring.sql.init.password=password
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# =============== Token and Security Stuff ================= #

jwt.secret=AardvarksAreAmazingAfricanAnimalsAndAbsorbAntsAsAliments
aardvark.jwt.message=The aardvark is the only living species of the order Tubulidentata. It is a medium-sized, burrowing, nocturnal mammal native to Africa.
spring.security.user.name=aardvark
spring.security.user.password=IEatTermites

# ================ Strings for messages and stuff =================== #
spring.config.import=Il18n/strings_en.properties